/*
 * This file is generated by jOOQ.
*/
package org.com.app.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.com.app.Empgestproject;
import org.com.app.Indexes;
import org.com.app.Keys;
import org.com.app.tables.records.DepartementRecord;
import org.jooq.Field;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.8"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Departement extends TableImpl<DepartementRecord> {

    private static final long serialVersionUID = -332177432;

    /**
     * The reference instance of <code>empgestproject.departement</code>
     */
    public static final Departement DEPARTEMENT = new Departement();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DepartementRecord> getRecordType() {
        return DepartementRecord.class;
    }

    /**
     * The column <code>empgestproject.departement.id</code>.
     */
    public final TableField<DepartementRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>empgestproject.departement.name</code>.
     */
    public final TableField<DepartementRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * Create a <code>empgestproject.departement</code> table reference
     */
    public Departement() {
        this(DSL.name("departement"), null);
    }

    /**
     * Create an aliased <code>empgestproject.departement</code> table reference
     */
    public Departement(String alias) {
        this(DSL.name(alias), DEPARTEMENT);
    }

    /**
     * Create an aliased <code>empgestproject.departement</code> table reference
     */
    public Departement(Name alias) {
        this(alias, DEPARTEMENT);
    }

    private Departement(Name alias, Table<DepartementRecord> aliased) {
        this(alias, aliased, null);
    }

    private Departement(Name alias, Table<DepartementRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Empgestproject.EMPGESTPROJECT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.DEPARTEMENT_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<DepartementRecord> getPrimaryKey() {
        return Keys.KEY_DEPARTEMENT_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<DepartementRecord>> getKeys() {
        return Arrays.<UniqueKey<DepartementRecord>>asList(Keys.KEY_DEPARTEMENT_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Departement as(String alias) {
        return new Departement(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Departement as(Name alias) {
        return new Departement(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Departement rename(String name) {
        return new Departement(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Departement rename(Name name) {
        return new Departement(name, null);
    }
}
