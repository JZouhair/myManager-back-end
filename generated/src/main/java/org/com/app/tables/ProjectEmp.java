/*
 * This file is generated by jOOQ.
*/
package org.com.app.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.com.app.Empgestproject;
import org.com.app.Indexes;
import org.com.app.Keys;
import org.com.app.tables.records.ProjectEmpRecord;
import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.8"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ProjectEmp extends TableImpl<ProjectEmpRecord> {

    private static final long serialVersionUID = -1440096546;

    /**
     * The reference instance of <code>empgestproject.project_emp</code>
     */
    public static final ProjectEmp PROJECT_EMP = new ProjectEmp();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ProjectEmpRecord> getRecordType() {
        return ProjectEmpRecord.class;
    }

    /**
     * The column <code>empgestproject.project_emp.id_emp</code>.
     */
    public final TableField<ProjectEmpRecord, Integer> ID_EMP = createField("id_emp", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>empgestproject.project_emp.id_project</code>.
     */
    public final TableField<ProjectEmpRecord, Integer> ID_PROJECT = createField("id_project", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * Create a <code>empgestproject.project_emp</code> table reference
     */
    public ProjectEmp() {
        this(DSL.name("project_emp"), null);
    }

    /**
     * Create an aliased <code>empgestproject.project_emp</code> table reference
     */
    public ProjectEmp(String alias) {
        this(DSL.name(alias), PROJECT_EMP);
    }

    /**
     * Create an aliased <code>empgestproject.project_emp</code> table reference
     */
    public ProjectEmp(Name alias) {
        this(alias, PROJECT_EMP);
    }

    private ProjectEmp(Name alias, Table<ProjectEmpRecord> aliased) {
        this(alias, aliased, null);
    }

    private ProjectEmp(Name alias, Table<ProjectEmpRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Empgestproject.EMPGESTPROJECT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PROJECT_EMP_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<ProjectEmpRecord, Integer> getIdentity() {
        return Keys.IDENTITY_PROJECT_EMP;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ProjectEmpRecord> getPrimaryKey() {
        return Keys.KEY_PROJECT_EMP_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ProjectEmpRecord>> getKeys() {
        return Arrays.<UniqueKey<ProjectEmpRecord>>asList(Keys.KEY_PROJECT_EMP_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ProjectEmp as(String alias) {
        return new ProjectEmp(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ProjectEmp as(Name alias) {
        return new ProjectEmp(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ProjectEmp rename(String name) {
        return new ProjectEmp(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ProjectEmp rename(Name name) {
        return new ProjectEmp(name, null);
    }
}
