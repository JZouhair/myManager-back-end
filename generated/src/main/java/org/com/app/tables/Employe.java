/*
 * This file is generated by jOOQ.
*/
package org.com.app.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.com.app.Empgestproject;
import org.com.app.Indexes;
import org.com.app.Keys;
import org.com.app.tables.records.EmployeRecord;
import org.jooq.Field;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.8"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Employe extends TableImpl<EmployeRecord> {

    private static final long serialVersionUID = 1548110226;

    /**
     * The reference instance of <code>empgestproject.employe</code>
     */
    public static final Employe EMPLOYE = new Employe();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EmployeRecord> getRecordType() {
        return EmployeRecord.class;
    }

    /**
     * The column <code>empgestproject.employe.id</code>.
     */
    public final TableField<EmployeRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>empgestproject.employe.name</code>.
     */
    public final TableField<EmployeRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>empgestproject.employe.cin</code>.
     */
    public final TableField<EmployeRecord, String> CIN = createField("cin", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>empgestproject.employe.email</code>.
     */
    public final TableField<EmployeRecord, String> EMAIL = createField("email", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>empgestproject.employe.tele</code>.
     */
    public final TableField<EmployeRecord, String> TELE = createField("tele", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>empgestproject.employe.role</code>.
     */
    public final TableField<EmployeRecord, String> ROLE = createField("role", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>empgestproject.employe.id_dept</code>.
     */
    public final TableField<EmployeRecord, Integer> ID_DEPT = createField("id_dept", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * Create a <code>empgestproject.employe</code> table reference
     */
    public Employe() {
        this(DSL.name("employe"), null);
    }

    /**
     * Create an aliased <code>empgestproject.employe</code> table reference
     */
    public Employe(String alias) {
        this(DSL.name(alias), EMPLOYE);
    }

    /**
     * Create an aliased <code>empgestproject.employe</code> table reference
     */
    public Employe(Name alias) {
        this(alias, EMPLOYE);
    }

    private Employe(Name alias, Table<EmployeRecord> aliased) {
        this(alias, aliased, null);
    }

    private Employe(Name alias, Table<EmployeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Empgestproject.EMPGESTPROJECT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.EMPLOYE_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<EmployeRecord> getPrimaryKey() {
        return Keys.KEY_EMPLOYE_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<EmployeRecord>> getKeys() {
        return Arrays.<UniqueKey<EmployeRecord>>asList(Keys.KEY_EMPLOYE_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Employe as(String alias) {
        return new Employe(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Employe as(Name alias) {
        return new Employe(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Employe rename(String name) {
        return new Employe(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Employe rename(Name name) {
        return new Employe(name, null);
    }
}
